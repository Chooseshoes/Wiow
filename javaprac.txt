Practical 1


Q.1   Write a java program that take inputs as a number and print  its multiplication table upto 10.
CODE:
import java.util.Scanner;
class table
{
 public static void main(String args[])
  {
   int num,i;
   System.out.println("Enter the value of n");
   Scanner  sc = new Scanner(System.in);
   num = sc.nextInt();
   for(i = 1 ;i<=10;i++)
    {
  System.out.println(num +"*" +  i + "=" + num*i);
    }
    }
}

OUTPUT:
 
Q.2Write a java program  to display the following pattern.
*
**
***
****
*****
CODE:
import java.util.Scanner;
class pattern 
{
 public static void main(String args[])
  {
   int n;
   System.out.println("Enter the value for rows ");
   Scanner  sc = new Scanner(System.in);
   n = sc.nextInt();
   for(int i=1; i<=n ;i++)
   {
   for(int j=1 ;j<=i;j++)
   { 
  System.out.print("*" + " ");
   } 
  System.out.println();
   }
  }
}
OUTPUT:
 

Q.3Write  a java program  to print the area and perimeter of circle .
CODE:
import java.util.Scanner;
class circle1
{
 public static void main(String args[])
  {
   double r ,area,perimeter;
   System.out.println(" Enter  the radius  for area and perimeter of circle");
   Scanner  sc = new Scanner(System.in);
   r = sc.nextDouble();
   area = 3.14 * r * r;
  System.out.println(" The area of circle  is " + area);
  perimeter =  2 * 3.14 * r;
  System.out.println(" The perimeter of circle  is " + perimeter);
  }
}
OUTPUT:
 

Practical 2

Q.1Write a java program to convert  binary to decimal number.
CODE:
class  convert
{
public static void main(String args[])
 {
 long num =  1001;

 int  decimal = convertBinaryToDecimal(num);

 System.out.println("Binary  to decimal");
 System.out.println(num + " ="  +decimal);
 
 }

public static int convertBinaryToDecimal(long num)
 {
int decimalNumber = 0, i= 0;
long remainder;

while(num!= 0) 
 {
 remainder =  num %10;
 num = num/10;
 decimalNumber += remainder *Math.pow(2,i);
 i++;
 }
return  decimalNumber;
 }
}
OUTPUT:
 

Q.2Write a java program to  reverse  the string.
CODE:
import  java.util.Scanner;
class reverse
{
 public static void main(String args[])
 {
 Scanner sc = new  Scanner(System.in);
 System.out.println("Enter  the string");
 char[]  letters =  sc.nextLine().toCharArray();
 System.out.println("Reverse of a string"); 

 for(int i = letters.length-1;i>=0;i--)
 {
 System.out.println(letters[i]); 

 } 
 }
}
OUTPUT:
 



Practical 3


Q.1 Write a  java program to create 2D array  and display element  of  it ,value would be taken from user .
CODE:
import java.util.Scanner;
class array1
{
public static void main(String args[])
{
int i,j,m,n;
System.out.println("Enter the size of rows");
Scanner sc = new Scanner(System.in);
n = sc.nextInt();
System.out.println("Enter the size of columns");
m = sc.nextInt();
int arr[][] = new int[n][m];
System.out.println("Enter elements of array ");
for(i =0 ;i<n; i++)
{
for(j =0; j<m;j++)
{
 arr[i][j] = sc.nextInt();
}
}
System.out.println("Elements are ");
for (i =0; i<n;i++)
{
for(j = 0;j<m; j++)
{
System.out.println(arr[i][j] + " ");
}
System.out.println(" ");
}
}
}
OUTPUT:
 

Q.2Write a java  program to print array elements in ascending order or descending order,fetch the inputs from user.
CODE:
import java.util.Scanner;
class sortingarray1
{
public static void main(String args[])
{
Scanner sc =  new Scanner(System.in);
System.out.println("Enter  the size of array");
int n = sc.nextInt();
int[] a = new int[n];
int i,j,temp=0;

System.out.println("Enter the elements of array");
for(i =0; i<n;i++)
{
 a[i] = sc.nextInt();
}
System.out.println("Array elements are");
for(i =0;i<n; i++)
{
System.out.println(" " +a[i]);
}
for(i =0;i<n;i++)
{
for(j= i+1;j<n;j++)
{
if(a[i] >a[j])
{
 temp = a[i];
 a[i] = a[j];
 a[j] = temp;
}
}
}
System.out.println();
System.out.println("Elements in ascending order ");
for(i =0;i<n;i++)
{
System.out.println(" " +a[i]);
}
System.out.println();
System.out.println("Elements in descending order ");
for(i =n-1;i>=0;i--)
{
System.out.println(" " +a[i]);
}
}
}
OUTPUT:
 



Practical 4

Q.1Write a java program to perform matrix multiplication.
CODE:
import java.util.Scanner;
 public class MatrixMultiplication { 
public static void main(String[] args) { 
Scanner scanner = new Scanner(System.in); 
System.out.print("Enter the number of rows for the first matrix: "); 
int rowsA = scanner.nextInt(); 
System.out.print("Enter the number of columns for the first matrix: ");
 int colsA = scanner.nextInt();
 System.out.print("Enter the number of rows for the second matrix: "); 
int rowsB = scanner.nextInt(); 
System.out.print("Enter the number of columns for the second matrix: "); 
int colsB = scanner.nextInt();
 if (colsA != rowsB) { 
System.out.println("Matrix multiplication is not possible.");
return ;
}
int[][] matrixA = new int[rowsA][colsA];
int[][] matrixB = new int[rowsB][colsB]; 
System.out.println("Enter the elements of the first matrix:"); 
for (int i = 0; i < rowsA; i++) { 
for (int j = 0; j < colsA; j++) {
 matrixA[i][j] = scanner.nextInt(); 
       }
 } 
System.out.println("Enter the elements of the second matrix:"); 
for (int i = 0; i < rowsB; i++) {
 for (int j = 0; j < colsB; j++) { 
matrixB[i][j] = scanner.nextInt();
     }
} 
int[][] resultMatrix = multiplyMatrices(matrixA, matrixB); 
System.out.println("Resultant matrix after multiplication:"); 
for (int i = 0; i < rowsA; i++) { 
for (int j = 0; j < colsB; j++) { 
System.out.print(resultMatrix[i][j] + " "); 
  }
System.out.println();
  }
}
public static int[][] multiplyMatrices(int[][] a, int[][] b) {
int rowsA = a.length; 
int colsA = a[0].length;
int colsB = b[0].length; 
int[][] result = new int[rowsA][colsB]; 
for (int i = 0; i < rowsA; i++) { 
         for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    result[i][j] += a[i][k] * b[k][j]; 
         }
    }
 }
 return result; 
    } 
}
 Output:



Practical 5





Q.1 Write a java program to implement single-level inheritance.
CODE:
class Shape 
{
    void display() 
  {
      System.out.println("Shape ");
   }
}
class Rectangle extends Shape
 {
     void area() 
   {
      System.out.println("Rectangle");
   }
}
 class singlelevel
 {
   public static void main(String args[])
 {
      Rectangle rect = new Rectangle();
      rect.display();
      rect.area();
   }
}
OUTPUT:
 

Q.2 Write a java program to implement multi-level inheritance.
CODE:
class Shape 
{
     void display()
   {
      System.out.println("Shape");
   }
}
class Rectangle extends Shape 
{
      void area()
    {
      System.out.println("Rectangle");
    }
}
class Cube extends Rectangle
 {
     void volume()
   {
      System.out.println("Cube");
   }
}
 class Multilevel
 {
   public static void main(String args[])
 {
      Cube c = new Cube();
      c.display();
      c.area();
      c.volume();
   }
}
OUTPUT:
 


Practical 6


Q.1 Write a java program implementation of super keyword .
1)for calling immediate parent class instance variable.
2)for calling immediate parent class instance method.
3)for calling immediate parent class instance constructor.
CODE:
1)for calling immediate parent class instance variable.
class Animal 
{
 String color ="black";
}
class Dog extends Animal 
{
 String color ="white";
void printcolor()
{
System.out.println(color);
System.out.println(super.color);
}
}
class variable
{
public static void main(String args[])
{
Dog d = new Dog();
d.printcolor();
}
}
OUTPUT:
 

2)for calling immediate parent class instance method.
CODE:
class Animal
{  
  void eat()
 {
   System.out.println("eating");
 }  
}  

class Dog extends Animal
{  
 void eat()
  {
   System.out.println("eating bread");
  }  
 void bark()
  {
   System.out.println("barking");
  }  
void work()
  {  
   super.eat();  
   bark();  
  }  
}  

class method
{  
public static void main(String args[])
{  
 Dog d=new Dog();  
 d.work();  
}
}
OUTPUT:
3)for calling immediate parent class instance constructor.
CODE:
class Animal
 {

  // default or no-arg constructor of class Animal

  Animal() 
{
    System.out.println("I am an animal");
  }
}

class Dog extends Animal 
{

  // default or no-arg constructor of class Dog

  Dog() 
{

    // calling default constructor of the superclass

    super();
    System.out.println("I am a dog");
  }
}

class constructor 
{
  public static void main(String[] args) 
{
    Dog d = new Dog();
  }
}
OUTPUT:
 







Practical 7



Q.1 Write a java program for performing method overriding.
CODE:
class Animal
{
    void print() 
  {
      System.out.println("I am a animal.");
   }
}

class Dog extends Animal
 {
   
    void print() 
  {
      System.out.println("I am a dog.");
   }
}

class overriding
 {
   public static void main(String[] args) 
{
      Dog d = new Dog();
      d.print();
   }
}

OUTPUT:
 

Q.2 Write a java program for performing method overloading.
CODE:
class Adder
  { 
   static int add(int a,int b)
     {
       return a+b;
     } 
   static int add(int a,int b,int c)
    {
       return a+b+c;
    } 
  } 
class overloading
 { 
   public static void main(String[] args)
  { 
    System.out.println(Adder.add(11,11)); 
    System.out.println(Adder.add(11,11,11)); 
   }
 }s
OUTPUT:
 
Q.3) Write a java program for implementation of data abstraction. 
Code : 
abstract class Bike{
 abstract void run();
 } 
class Honda4 extends Bike{ 
void run(){
System.out.println("running safely");
} 
public static void main(String args[]){
 Bike obj = new Honda4(); 
obj.run();
 }
 }
 Output:
 
                                                            



Practical 8


 Q.1 Write a java program to create Threads : 
Source Code: 
class Multi extends Thread{ 
public void run(){ 
System.out.println("thread is running..."); 
} 
public static void main(String args[]){ 
Multi t1=new Multi(); 
t1.start(); 
} 
} 
Output:
 

 Q.2 Write a java Program to open a file and display the Content in console window. 
Source Code : 
import java.io.BufferedReader; 
import java.io.FileReader; 
import java.io.IOException; 
public class ReadFileAndDisplayContent { 
public static void main(String[] args) { 
String fileName = "yourFileName.txt"; 
try { 
FileReader fileReader = new FileReader(fileName); 
BufferedReader bufferedReader = new BufferedReader(fileReader); 
String line; 
while ((line = bufferedReader.readLine()) != null) { 
System.out.println(line); 
} 
bufferedReader.close(); 
} catch (IOException e) { 
System.err.println("Error reading the file: " + e.getMessage()); 
} 
} 
} 
Output:  
 
Q.3 Write a java program to write the data into a file: 
Source Code : 
import java.io.BufferedWriter; 
import java.io.FileWriter; 
import java.io.IOException; 
public class DataFile { 
public static void main(String[] args) { 
String fileName = "output.txt"; 
try { 
FileWriter fileWriter = new FileWriter(fileName); 
BufferedWriter bufferedWriter = new BufferedWriter(fileWriter); 
String data = "Hello, world!\nThis is a Java program to write data to a file."; 
bufferedWriter.write(data); 
bufferedWriter.close(); 
System.out.println("Data has been written to the file successfully."); 
} catch (IOException e) { 
System.err.println("Error writing to the file: " + e.getMessage()); 
} 
} 
} 
Output:



Practical 9


Q. Write a java program for performing exception Handling (Arithmetic Exception) 
Source Code : 
public class HandleArithmeticException { 
void divide(int a, int b) { 
int res; 
try { 
// performing division and storing the result 
res = a / b; 
System.out.println("Division process has been done successfully."); 
System.out.println("Result came after division is: " + res); 
} catch (ArithmeticException ex) { 
System.out.println("Should avoid dividing by 0 " + ex); 
} 
} 
public static void main(String[] args) { 
HandleArithmeticException obj = new HandleArithmeticException(); 
obj.divide(1, 0); 
} 
} 
Output:
 

