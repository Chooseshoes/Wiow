Prac  1.B) Draw a coordinate axis at the center of screen.


#include<stdio.h>
#include<conio.h>
#include<graphics.h>
void main()
{
int gd=DETECT,gm;
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
line(getmaxx()/2,0,getmaxx()/2,getmaxy());
line(0,getmaxy()/2,getmaxx(),getmaxy()/2);
getch();
closegraph();
}



Prac 2. A) Divide your screen into regions draw circle, rectangle, ellipse, square, half 
ellipse & concentric circle in each region with appropriate message.



#include<stdio.h>
#include<conio.h>
#include <graphics.h>
void main(){
int gdriver=DETECT, gmode;
initgraph(&gdriver,&gmode,"c:\\turboc3\\bgi");
line(200,0,200,600);
line(475,0,475,600);
line(0,250,900,250);
rectangle(240,50,430, 150);
outtextxy(270,200, "Rectangle");
circle(570,95,60);
outtextxy(550,200,"Circle");
ellipse(325,325,0,360,75,50);
outtextxy(280,400,"ellipse");
ellipse(575,325,0,180,62,40); outtextxy(525,400,"Half Ellipse");
rectangle(50,50, 150, 150);
outtextxy(70,200, "square");
circle(90,325,15);
circle(90,325,25);
circle(90,325,35);
circle(90,325,45);
outtextxy(30,400, "Concentric Circle");
getch();
closegraph();
}



Prac 2.B) Draw a simple hut on screen.


#include<stdio.h>
#include <conio.h>
#include <graphics.h>
void main(){
int gdriver=DETECT,gmode;
initgraph(&gdriver, &gmode, "c:\\turboc3\\bgi");
rectangle (225, 100, 400, 160);
line (225, 100, 180, 160);
line (180,160,225,160);
rectangle (225,160,400,300);
rectangle(180,160,225,300);
rectangle (285,220,325,300);
rectangle (250,170,280,200);
rectangle (360,170,330,200);
getch();
closegraph();
}


Prac  .3)  Develop the program for DDA line drawing algorithm.



#include<graphics.h>
#include<stdio.h>
#include<math.h>
#include<dos.h>
void main()
{
float x,y,x1,y1,x2,y2,dx,dy,step;
int i,gd=DETECT, gm;
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
printf("Enter the value of x1 & y1: ");
scanf("%f%f",&x1,&y1);
printf("Enter the value of x2 & y2: ");
scanf("%f%f",&x2,&y2);
dx=abs(x2-x1);
dy=abs(y2-y1);
if(dx>=dy)
step=dx;
else
step=dy;
dx=dx/step;
dy=dy/step;
x=x1;
y=y1;
i=1;
while(i<=step)
{
putpixel(x,y,YELLOW);
x=x+dx;
y=y+dy;
i=i+1;
delay(100);
}
getch();
closegraph();
}



Prac .4)  Develop the program for Bresenham line drawing algorithm.


#include<graphics.h>
#include<stdio.h>
void main()
{
int i,gd=DETECT,gm,x1,y1,x2,y2,dx,dy,pk;
do
{
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
printf("Enter start coordinate: ");
scanf("%d%d",&x1,&y1);
printf("Enter end coordinate: ");
scanf("%d%d",&x2,&y2);
cleardevice();
dx=x2-x1;
dy=y2=y1;
pk=2*dy-dx;
do
{
putpixel(x1,y1,BLUE);
if(pk<0)
pk+=2*dy;
else
{
++y1;
pk+=2*(dy-dx);
}
++x1;
}
while(x1<=x2);
printf("Press 'y' for try again...");
}
while(getch()=='y');
}



Prac .5)  Develop a program for midpoint Circle Drawing Algorithm.



#include<stdio.h>
#include<graphics.h>
#include<dos.h>
#include<conio.h>
void main(){
int gd=DETECT,gm=DETECT;
int r,x,y,midx,midy;
float p;
clrscr();
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
printf("Enter radius of Circle ");
scanf("%d",&r);
x=0;
y=r;
p=1.25-r;
midx=getmaxx()/2;
midy=getmaxy()/2;
do{
putpixel(midx+x,midy+y,1);
putpixel(midx-x,midy-y,2);
putpixel(midx-x,midy+y,3);
putpixel(midx+x,midy-y,4);
putpixel(midx+y,midy+x,5);
putpixel(midx+y,midy-x,6);
putpixel(midx-y,midy-x,7);
putpixel(midx-y,midy+x,8);
delay(20);
if(p<0){
x++;
p=p+2*x+1;}
else{
x++;
y--;
p=p+2*(x-y)+1;}}
while(x<=y);
getch();
closegraph();
}


Prac .6)   Develop a program to fill a rectangle using boundary fill Algorithm.


#include<graphics.h>
void boundaryFill8(int x,int y, int fill_color, int boundary_color){
if(getpixel(x,y)!=boundary_color && getpixel(x,y)!=fill_color){
putpixel(x,y, fill_color); delay(3);
boundaryFill8(x+1,y,fill_color, boundary_color);
boundaryFill8(x,y+1,fill_color, boundary_color);
boundaryFill8(x-1,y,fill_color, boundary_color);
boundaryFill8(x,y-1,fill_color, boundary_color);
boundaryFill8(x-1,y-1,fill_color, boundary_color);
boundaryFill8(x-1,y+1,fill_color, boundary_color);
boundaryFill8(x+1,y-1,fill_color, boundary_color);
boundaryFill8(x+1,y+1,fill_color, boundary_color);}}
int main()
{
int gd=DETECT,gm;
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
rectangle(50,50,100,100);
boundaryFill8(55,55,6,WHITE); getch();
closegraph();
return 0;
}



Prac .7)   Write a program to implement 2D translation and scaling. 



#include<stdio.h>
#include<conio.h>
#include<graphics.h>
#include<math.h>
void translate();
void scale();
void main(){
int ch;
int gd=DETECT,gm;
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
setcolor(6);
outtextxy (100,88,"Object before.");
rectangle(100,150,150,100);
printf("---MENU---");
printf("\n 1)Translate\n 2)Scale\n");
printf("\nEnter your choice: ");
scanf("%d",&ch);
cleardevice();
switch(ch){
case 1: translate();
break;
case 2: scale();
break;
default: printf("you have enterd wrong choice"); break;}
getch(); closegraph();}
void translate(){ int tx,ty;
setcolor(2);
outtextxy(240,10,"TRANSLATION");
outtextxy(238,20,"------------");
printf("\nEnter tx: ");
scanf("%d",&tx); printf("\nEnter ty: ");
scanf("%d",&ty);
cleardevice();
rectangle(100,150,150,100);
printf("\nAfter Translation");
rectangle(100+tx,150+ty,150+tx,100+ty);}
void scale(){ int sx,sy;
setcolor(2); outtextxy(240,10,"SCALING");
outtextxy(238,20,"--------"); printf("\nEnter sx: ");
scanf("%d",&sx); printf("\nEnter sy: ");
scanf("%d",&sy); cleardevice();
rectangle(100,150,150,100);
printf("\nAfter Scaling");
rectangle(100*sx,150*sy,150*sx,100*sy);
}



Prac .8)  Perform smiling face animation using graphics function.




#include<graphics.h>
#include<conio.h>
int main(){
int gd=DETECT, gm;
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
setcolor(YELLOW);
circle(300,100,40);
setfillstyle(SOLID_FILL,YELLOW);
floodfill(300,100,YELLOW);
setcolor(BLACK);
setfillstyle(SOLID_FILL,BLACK);
fillellipse(315,90,2,6);
fillellipse(285,90,2,6);
ellipse(300,105,205,335,20,9);
ellipse(300,105,205,335,20,10);
ellipse(300,105,205,335,20,11);
getch();
return 0;
}



Prac . 9)  Draw a moving car on screen.



#include<graphics.h>
#include<stdio.h>
#include<conio.h>
#include<dos.h>
void draw_moving_car(void)
{
int i=0,gd=DETECT,gm;
initgraph(&gd,&gm,"c:\\turboc3\\bgi");
for(i=0;i<=420;i=i+10)
{
cleardevice();
setcolor (5);
//lines for body bonnet of car
line (0+i,300,210+i,300);
line(50+i,300,75+i,270);
line(75+i,270,140+i,270);
line (140+i, 270, 165+i,300);
line (0+i,300,0+i,330);
line (210+i,300,210+i,330);
//left wheel of car
circle(65+i,330,15);
circle(65+i,330,2);
//right wheel of car
circle(145+i,330,15);
circle(145+i,330,2);
//line left of left wheel
line (0+i,330,50+i,330);
//line middle of both wheel
line(80+i,330,130+i,330);
line(105+i,270,105+i,330);
//steering wheel
line (144+i, 290, 165+i,300);
ellipse(140+i,290,0,360,5,6);
//boy in car
circle(120+i,285,6);
circle(121+i,284,1);
line (120+i,291, 120+i,300);
ellipse(125+i,287,180,270,3,1);
//line right of right wheel
line (210+i,330, 160+i,330);
delay(50);
}
getch();
closegraph();
}
int main()
{
draw_moving_car();
return 0;
}
